const fs = require('fs').promises;
const allfs = require('fs');
const path = require('path');
const process = require('process');
const {authenticate} = require('@google-cloud/local-auth');
const {google} = require('googleapis');

// –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç—Ç–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π —É–¥–∞–ª–∏—Ç–µ token.json.
const SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly'];
// –í —Ñ–∞–π–ª–µ token.json —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –æ–Ω
// —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
// –≤—Ä–µ–º—è.
const TOKEN_PATH = path.join(process.cwd(), 'token.json');
const CREDENTIALS_PATH = path.join(process.cwd(), 'credentials.json');

/**
 * –°—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–Ω–µ–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
 *
 * @return {Promise<OAuth2Client|null>}
 */
async function loadSavedCredentialsIfExist() {
  try {
    const content = await fs.readFile(TOKEN_PATH);
    const credentials = JSON.parse(content);
    return google.auth.fromJSON(credentials);
  } catch (err) {
    return null;
  }
}

/**
 * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å GoogleAUth.fromJSON.
 *
 * @param {OAuth2Client} client
 * @return {Promise<void>}
 */
async function saveCredentials(client) {
  const content = await fs.readFile(CREDENTIALS_PATH);
  const keys = JSON.parse(content);
  const key = keys.installed || keys.web;
  const payload = JSON.stringify({
    type: 'authorized_user',
    client_id: key.client_id,
    client_secret: key.client_secret,
    refresh_token: client.credentials.refresh_token,
  });
  await fs.writeFile(TOKEN_PATH, payload);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ API.
 *
 */
async function authorize() {
  let client = await loadSavedCredentialsIfExist();
  if (client) {
    return client;
  }
  client = await authenticate({
    scopes: SCOPES,
    keyfilePath: CREDENTIALS_PATH,
  });
  if (client.credentials) {
    await saveCredentials(client);
  }
  return client;
}

let arrayOfGroups = [];

async function listFiles(authClient) {
  const drive = google.drive({version: 'v3', auth: authClient});
  const folderId = '14tASWrvhPMMcKmy-Ec1Yn_k6MfCjUyYI';
  // const res = await drive.files.list({
  //   pageSize: 20,
  //   fields: 'nextPageToken, files(id, name)',
  // });
  const res = await drive.files.list({
    q: `'${folderId}' in parents and mimeType = 'application/vnd.google-apps.folder'`,
    fields: 'files(id, name)',
  });
  const files = res.data.files;
  if (files.length === 0) {
    console.log('No files found.');
    return;
  }
  console.log('Files:');
  files.map((file) => {
    console.log(`${file.name} (${file.id})`);
    arrayOfGroups.unshift(file.name);
  });
  console.log(arrayOfGroups)
}
authorize().then(listFiles).catch(console.error);

const TelegramApi = require('node-telegram-bot-api');

const token = '6453665454:AAHKiXQLvtUP1PtnFftF40AdYBPJqjUcQDc';

const bot = new TelegramApi(token, {polling: true});

const chats = {};

const start = () => {
    bot.setMyCommands([
        {command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
    ])

    bot.on('message', async msg =>{
        console.log(msg);
        const text = msg.text;
        const chatId = msg.chat.id;
        
        
        if (text === '/start'){
            await bot.sendSticker(chatId, `https://tlgrm.ru/_/stickers/1bf/558/1bf558c3-9850-46b5-a7ad-9105a634d8d1/192/18.webp`);
            await bot.sendMessage(chatId, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π ${msg.chat.first_name}, —è –±–æ—Ç –ü–µ–ø–µ, –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –º–æ–∂–µ—à—å –∫–∏–¥–∞—Ç—å —Å–≤–æ—é –¥–æ–º–∞—à–∫—É. –ö–∞–∫ —Ç—ã –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞`);
            return bot.sendMessage(chatId, '–ø—É–∫ üò≥',{
                reply_markup: {
                    keyboard: [
                        ['–ì—Ä—É–ø–ø–∞'],
                    ],
                }
            })
        }
        if (text === "–ì—Ä—É–ø–ø–∞" || text === "–≥—Ä—É–ø–ø–∞"){
            return bot.sendMessage(chatId,  '–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —É—á–∏—à—å—Å—è! ü§ì',{
                reply_markup: {
                    keyboard: [
                      arrayOfGroups
                    ],
                }
            })
        }
        if (text === "–ò–°–∏–ü-21"){
            return bot.sendMessage(chatId, '—Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–µ–±—è üò∂‚Äçüå´Ô∏è', {
                reply_markup: {
                    keyboard: [
                        ['–ò–°–∏–ü-21',],
                        
                    ],
                }
            })
        }
        if (text === "–ò–°–∏–ü-22"){
            return bot.sendMessage(chatId, '—Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–µ–±—è üò∂‚Äçüå´Ô∏è', {
                reply_markup: {
                    keyboard: [
                        ['–ò–°–∏–ü-22',], 
                    ],
                }
            })
        }
        if (text === "–ò–°–∏–ü-23"){
            return bot.sendMessage(chatId, '—Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–µ–±—è üò∂‚Äçüå´Ô∏è', {
                reply_markup: {
                    keyboard: [
                        ['–ò–°–∏–ü-23',],
                    ],
                }
            })
        }
        if (text === "–ò–°–∏–ü-24"){
            return bot.sendMessage(chatId, '—Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–µ–±—è üò∂‚Äçüå´Ô∏è', {
                reply_markup: {
                    keyboard: [
                        ['–ò–°–∏–ü-24',],
                    ],
                }
            })
        }
        else{ bot.sendMessage(chatId, '–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è üòû');}
        
        
    });
}
start();